#include <bits/stdc++.h>

using namespace std;

class SinglyLinkedListNode {
    public:
        int data;
        SinglyLinkedListNode *next;

        SinglyLinkedListNode(int node_data) {
            this->data = node_data;
            this->next = nullptr;
        }
};

class SinglyLinkedList {
    public:
        SinglyLinkedListNode *head;
        SinglyLinkedListNode *tail;

        SinglyLinkedList() {
            this->head = nullptr;
            this->tail = nullptr;
        }

        void insert_node(int node_data) {
            SinglyLinkedListNode* node = new SinglyLinkedListNode(node_data);

            if (!this->head) {
                this->head = node;
            } else {
                this->tail->next = node;
            }

            this->tail = node;
        }
};

void print_singly_linked_list(SinglyLinkedListNode* node, string sep) {
    while (node) {
        cout << node->data;

        node = node->next;

        if (node) {
            cout << sep;
        }
    }
}

void free_singly_linked_list(SinglyLinkedListNode* node) {
    while (node) {
        SinglyLinkedListNode* temp = node;
        node = node->next;

        free(temp);
    }
}
 
 // Solution: 
 // Recursively call reversePrint() on the next node 
 // before printing the current node's data, 
 // so the list prints in reverse order.
void reversePrint(SinglyLinkedListNode* head) {
    // base case: !head = NULL = nullptr
    // print nothing, just return
    // (we've reached the end of the list)
    if(!head) {
        return;
    }
    // Otherwise call the function the next node in the list and print it first
    // THEN print this node's data
    else {
        reversePrint(head->next);
        cout << head->data << '\n';
    }
}